# espera-se que a pessoa usu치ria possa escolher um crit칠rio de
# ordena칞칚o para exibir os empregos. J치 temos uma implementa칞칚o
#  para essa ordena칞칚o em src/sorting.py, mas queremos ter certeza
#  de que ela funciona e, principalmente, que n칚o deixar치 de
# funcionar conforme vamos implementando novos recursos.
# Precisamos ent칚o escrever um teste!

# Esse teste deve se chamar test_sort_by_criteria e garantir
# que a fun칞칚o funciona segundo esta especifica칞칚o:

# A fun칞칚o sort_by recebe dois par칙metros:
# jobs uma lista de dicion치rios com os detalhes de cada emprego;
# criteria uma string com uma chave para ser usada como crit칠rio de ordena칞칚o.
# O par칙metro criteria deve ter um destes valores: min_salary,
#  max_salary, date_posted
# A ordena칞칚o para min_salary deve ser crescente, mas para max_salary
#  ou date_posted devem ser decrescentes.
# Os empregos que n칚o apresentarem um valor v치lido no campo escolhido
#  para ordena칞칚o devem aparecer no final da lista.
# 游늷 O teste da Trybe espera que o seu teste falhe em alguns casos.
#  Nesse caso, o teste ter치 a sa칤da XFAIL (ao inv칠s de PASS ou FAIL),
# e isso significa que o requisito foi atendido 九덢잺

from src.sorting import sort_by
import pytest

# Simula um registro sem data de cria칞칚o
invalid_keys = ["date_create", None]

jobs = [
    {"max_salary": 83891, "min_salary": 73558, "date_posted": "2022-02-07"},
    {"max_salary": 116224, "min_salary": 57432, "date_posted": "2022-03-25"},
    {"max_salary": 125003, "min_salary": 98266, "date_posted": "2022-01-15"},
]

# dicion치rio de jobs ap칩s a ordena칞칚o por min_salary
# - usado para compara칞칚o no teste
expected_min_salary = [
    {"max_salary": 116224, "min_salary": 57432, "date_posted": "2022-03-25"},
    {"max_salary": 125003, "min_salary": 98266, "date_posted": "2022-01-15"},
    {"max_salary": 83891, "min_salary": 73558, "date_posted": "2022-02-07"},
]

# dicion치rio de jobs ap칩s a ordena칞칚o por max_salary
# - usado para compara칞칚o no teste
expected_max_salary = [
    {"max_salary": 125003, "min_salary": 98266, "date_posted": "2022-01-15"},
    {"max_salary": 116224, "min_salary": 57432, "date_posted": "2022-03-25"},
    {"max_salary": 83891, "min_salary": 73558, "date_posted": "2022-02-07"},
]

# dicion치rio de jobs ap칩s a ordena칞칚o por date_posted
# - usado para compara칞칚o no teste
expected_date_post = [
    {"max_salary": 116224, "min_salary": 57432, "date_posted": "2022-03-25"},
    {"max_salary": 83891, "min_salary": 73558, "date_posted": "2022-02-07"},
    {"max_salary": 125003, "min_salary": 98266, "date_posted": "2022-01-15"},
]


def test_sort_by_criteria():
    sort_by(jobs, "min_salary")
    assert jobs == expected_min_salary

    sort_by(jobs, "max_salary")
    assert jobs == expected_max_salary

    sort_by(jobs, "date_posted")
    assert jobs == expected_date_post

    for criteria in invalid_keys:
        with pytest.raises(ValueError, match=f"Sorting invalid to {criteria}"):
            sort_by(jobs, criteria)

# https://docs.pytest.org/en/7.1.x/reference/reference.html?highlight=raises#pytest.raises
# https://docs.pytest.org/en/7.1.x/example/simple.html?highlight=assert
